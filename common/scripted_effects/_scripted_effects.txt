upgrade_military_law = {
	if = {
		limit = {
			has_idea = disarmed_nation
		}
		add_ideas = volunteer_only
	}
	else_if = {
		limit = {
			has_idea = volunteer_only
		}
		add_ideas = random_enlistment
	}
	else_if = {
		limit = {
			has_idea = random_enlistment
		}
		add_ideas = system_enlistment
	}
	else_if = {
		limit = {
			has_idea = system_enlistment
		}
		add_ideas = expanded_conscription
	}
	else_if = {
		limit = {
			has_idea = expanded_conscription
		}
		add_ideas = ubiquitous_military_service
	}
	else_if = {
		limit = {
			has_idea = ubiquitous_military_service
		}
		add_ideas = total_mobilisation
	}
	else_if = {
		limit = {
			has_idea = total_mobilisation
		}
		add_ideas = army_with_a_state
	}
	else = {
		add_political_power = 150
	}
}



calculate_energy_balance = {
	calculate_generated_energy = yes
	calculate_used_energy = yes
	set_variable = { current_balance = generated_energy }
	subtract_from_variable = { current_balance = used_energy }
	if = {
		limit = {
			has_variable = energy_exported
		}
		subtract_from_variable = { current_balance = energy_exported }
	}
	if = {
		limit = {
			has_variable = energy_imported
		}
		add_to_variable = { current_balance = energy_imported }
	}
	calculate_energy_effects = yes
	#log = "[GetDateText]: [ROOT.GetName] - energy tick"
}

calculate_generated_energy = {
	set_temp_variable = { num_of_power_plants = 0 }
	set_temp_variable = { num_of_wind_farms = 0 }
	set_variable = { coal_used_by_power_plants = 0 }
	set_variable = { free_coal = resource@coal }
	every_controlled_state = {
		limit = {
			always = yes
		}
		set_variable = { this.power_plants_in_state = building_level@power_plant }
		add_to_temp_variable = { PREV.num_of_power_plants = building_level@power_plant }
		add_to_temp_variable = { PREV.num_of_wind_farms = building_level@wind_farm }
		if = {
			limit = {
				check_variable = {this.power_plants_in_state > 0}
			}
			add_to_variable = {
				prev.coal_used_by_power_plants = this.power_plants_in_state
			}
		}
	}
	multiply_variable = {
		coal_used_by_power_plants = 5
	}
	add_dynamic_modifier = {
		modifier = coal_used_by_power_plants_modifier
	}
	set_variable = { generated_energy = num_of_power_plants }
	set_variable = {lack_of_coal_modifier = 1}
	multiply_variable = { generated_energy = 1350 }
	if = {
		limit = {
			check_variable = {
				var = free_coal
				value = 0
				compare = less_than
			}
		}
		set_variable = {lack_of_coal_modifier = free_coal}
		divide_variable = {lack_of_coal_modifier = coal_used_by_power_plants}
		clamp_variable = { 
			var = lack_of_coal_modifier
			min = -0.9
			max = 0
		}
		add_to_variable = {lack_of_coal_modifier = 1}
	}
	
	multiply_variable = { generated_energy = lack_of_coal_modifier }
	set_temp_variable = { energy_from_wind_farms = num_of_wind_farms }
	multiply_temp_variable = { energy_from_wind_farms = 675 }
	add_to_variable = { generated_energy = energy_from_wind_farms }
	set_variable = { bonus_from_ideas = 1.0}
	add_to_variable = {bonus_from_ideas = modifier@energy_modifer}
	multiply_variable = { generated_energy = bonus_from_ideas }
	if = {
		limit = {
			has_variable = BBW_pre_blackout_nerf
		}
		multiply_variable = { generated_energy = BBW_pre_blackout_nerf }
	}
	if = {
		limit = {
			has_variable = power_from_atom
		}
		add_to_variable =  { generated_energy = power_from_atom }
	}
}

calculate_used_energy = {
	set_variable = { used_energy = num_of_military_factories}
	subtract_from_variable = {used_energy = workshops_count}
	multiply_variable = { used_energy = 200 }
	set_temp_variable = { energy_for_industry = num_of_civilian_factories }
	every_controlled_state = {
		limit = {
			always = yes
		}
		add_to_temp_variable = { PREV.energy_for_industry = building_level@synthetic_refinery }
		add_to_temp_variable = { PREV.energy_for_industry = building_level@high_tech_complex }
		add_to_temp_variable = { PREV.energy_for_industry = workshops_count }
	}
	multiply_temp_variable = { energy_for_industry = 100 }
	add_to_variable = { used_energy = energy_for_industry }
	if = {
		limit = {
			has_country_flag = importing_energy
		}
		subtract_from_variable = { used_energy = 750 }
	}
}

calculate_energy_effects = {
	set_variable = { ee_multiplier = current_balance }
	if = {
		limit = {
			check_variable = { generated_energy = 0 }
		}
		divide_variable = { ee_multiplier = 675 }
	}
	else = {
		divide_variable = { ee_multiplier = generated_energy }
	}
	clamp_variable = {
		var = ee_multiplier
		min = -1
	}
	if = {
		limit = {
			check_variable = { ee_multiplier < 0 }
		}
		set_variable = { low_power_penalty = 0.5 }
		multiply_variable = { low_power_penalty = ee_multiplier }
		add_dynamic_modifier = {
			modifier = lack_of_energy_modifier
		}
	}
}
#building effects
public_buildings_effect = {
	#liczenie

	set_temp_variable = {
		num_of_cathedrals_temp = 0
	}
	set_temp_variable = {
		num_of_universities_temp = 0
	}
	set_temp_variable = {
		num_of_hospitals_temp = 0
	}
	set_temp_variable = {
		num_of_prisons_temp = 0
	}
	set_temp_variable = {
		num_of_januszexes_temp = 0
	}
	every_controlled_state = {
		limit = {
			always = yes
		}
		add_to_temp_variable = { PREV.num_of_cathedrals_temp = building_level@cathedral }
		add_to_temp_variable = { PREV.num_of_universities_temp = building_level@university }
		add_to_temp_variable = { PREV.num_of_hospitals_temp = building_level@hospital }
		add_to_temp_variable = { PREV.num_of_prisons_temp = building_level@prison }
		add_to_temp_variable = { PREV.num_of_januszexes_temp = building_level@januszex }
	}
	set_variable = {
		num_of_cathedrals = num_of_cathedrals_temp
	}
	set_variable = {
		num_of_universities = num_of_universities_temp
	}
	set_variable = {
		num_of_hospitals = num_of_hospitals_temp
	}
	set_variable = {
		num_of_prisons = num_of_prisons_temp
	}
	set_variable = {
		num_of_januszexes = num_of_januszexes_temp
	}
	#limitowanie
	if = {
		limit = {
			NOT = {
				has_variable = rare_buildings_divider
			}
		}
		set_variable = {
			rare_buildings_divider = 20
		}
		if = {
			limit = {
				has_tech = less_limits
			}
			set_variable = {
				rare_buildings_divider = 10
			}
		}
	}
	set_temp_variable = {
		divider_halved = rare_buildings_divider
	}
	divide_temp_variable = {
		divider_halved = 2
	}
	if = {
		limit = {
			check_variable = {
				num_controlled_states < rare_buildings_divider
			}
		}
		set_variable = {
			max_effective_cathedrals = 1
		}
	}
	else = {
		set_variable = {
			max_effective_cathedrals = num_controlled_states
		}
		set_temp_variable = {
			modulo_from_cathedrals = max_effective_cathedrals
		}
		modulo_temp_variable = {
			modulo_from_cathedrals = rare_buildings_divider
		}
		divide_variable = {
			max_effective_cathedrals = rare_buildings_divider
		}
		round_variable = max_effective_cathedrals
		
		if = {
			limit = {
				check_variable = {
					modulo_from_cathedrals < divider_halved
				}
			}
			add_to_variable = {
				max_effective_cathedrals = 1
			}
		}
	}

	if = {
		limit = {
			check_variable = {
				num_controlled_states < rare_buildings_divider
			}
		}
		set_variable = {
			max_effective_universities = 1
		}
	}
	else = {
		set_variable = {
			max_effective_universities = num_controlled_states
		}
		set_temp_variable = {
			modulo_from_universities = max_effective_universities
		}
		modulo_temp_variable = {
			modulo_from_universities = 20
		}
		divide_variable = {
			max_effective_universities = 20
		}
		round_variable = max_effective_universities
		if = {
			limit = {
				check_variable = {
					modulo_from_universities < divider_halved
				}
			}
			add_to_variable = {
				max_effective_universities = 1
			}
		}
	}
	if = {
		limit = {
			check_variable = {
				num_controlled_states < 2
			}
		}
		set_variable = {
			max_effective_hospitals = 1
		}
	}
	else = {
		set_variable = {
			max_effective_hospitals = num_controlled_states
		}
		divide_variable = {
			max_effective_hospitals = 2
		}
		round_variable = max_effective_hospitals
	}
	if = {
		limit = {
			check_variable = {
				num_controlled_states < 5
			}
		}
		set_variable = {
			max_effective_prisons = 1
		}
	}
	else = {
		set_variable = {
			max_effective_prisons = num_controlled_states
		}
		set_temp_variable = {
			modulo_from_prisons = max_effective_prisons
		}
		modulo_temp_variable = {
			modulo_from_prisons = 5
		}
		divide_variable = {
			max_effective_prisons = 5
		}
		round_variable = max_effective_prisons
		if = {
			limit = {
				check_variable = {
					modulo_from_prisons < 3
				}
			}
			add_to_variable = {
				max_effective_prisons = 1
			}
		}
	}
	if = {
		limit = {
			check_variable = {
				num_controlled_states < rare_buildings_divider
			}
		}
		set_variable = {
			max_effective_januszexes = 1
		}
	}
	else = {
		set_variable = {
			max_effective_januszexes = num_controlled_states
		}
		set_temp_variable = {
			modulo_from_januszexes = max_effective_januszexes
		}
		modulo_temp_variable = {
			modulo_from_januszexes = 20
		}
		divide_variable = {
			max_effective_januszexes = 20
		}
		round_variable = max_effective_januszexes
		if = {
			limit = {
				check_variable = {
					modulo_from_januszexes < divider_halved
				}
			}
			add_to_variable = {
				max_effective_januszexes = 1
			}
		}
	}
	
	#wyliczanie modyfikatorÃ³w
	set_variable = { cathedral_effect_pp = num_of_cathedrals_temp }
	multiply_variable = {
		cathedral_effect_pp = 0.1
	}
	set_variable = { cathedral_effect_stab = num_of_cathedrals_temp }
	multiply_variable = {
		cathedral_effect_stab = 0.02
	}
	if = {
		limit = {
			check_variable = {
				num_of_cathedrals_temp > 0
			}
		}
		add_dynamic_modifier = {
			modifier = catherdal_mod
		}
	}
	else_if = {
		limit = {
			has_dynamic_modifier = {
				modifier = catherdal_mod
			}
		}
		remove_dynamic_modifier = {
			modifier = catherdal_mod
		}
	}

	if = {
		limit = {
			check_variable = {
				var = max_effective_cathedrals
				value = num_of_cathedrals_temp
				compare = less_than_or_equals
			}
		}
		set_variable = { cathedral_effect_correction_pp = max_effective_cathedrals }
		subtract_from_variable = { 
			cathedral_effect_correction_pp = num_of_cathedrals_temp
		}
		set_variable = { cathedral_effect_correction_stab = cathedral_effect_correction_pp }
		multiply_variable = {
			cathedral_effect_correction_pp = 0.1
		}
		multiply_variable = {
			cathedral_effect_correction_stab = 0.02
		}
		add_dynamic_modifier = {
			modifier = catherdal_overlimit_mod
		}
	}
	else = {
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = catherdal_overlimit_mod
				}
			}
			remove_dynamic_modifier = {
				modifier = catherdal_overlimit_mod
			}
		}
	}

	set_variable = { university_effect = num_of_universities_temp }
	multiply_variable = {
		university_effect = 0.01
	}
	if = {
		limit = {
			check_variable = {
				num_of_universities_temp > 0
			}
		}
		add_dynamic_modifier = {
			modifier = university_mod
		}
	}
	else_if = {
		limit = {
			has_dynamic_modifier = {
				modifier = university_mod
			}
		}
		remove_dynamic_modifier = {
			modifier = university_mod
		}
	}
	if = {
		limit = {
			check_variable = {
				var = max_effective_universities
				value = num_of_universities_temp
				compare = less_than_or_equals
			}
		}
		set_variable = { university_effect_correction = max_effective_universities }
		subtract_from_variable = { 
			university_effect_correction = num_of_universities_temp
		}
		multiply_variable = {
			university_effect_correction = 0.01
		}
		add_dynamic_modifier = {
			modifier = university_overlimit_mod
		}
	}
	else = {
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = university_overlimit_mod
				}
			}
			remove_dynamic_modifier = {
				modifier = university_overlimit_mod
			}
		}
	}

	set_variable = { hospital_effect = num_of_hospitals_temp }
	multiply_variable = {
		hospital_effect = 0.005
	}
	if = {
		limit = {
			check_variable = {
				num_of_hospitals_temp > 0
			}
		}
		add_dynamic_modifier = {
			modifier = hospital_mod
		}
	}
	else_if = {
		limit = {
			has_dynamic_modifier = {
				modifier = university_mod
			}
		}
		remove_dynamic_modifier = {
			modifier = university_mod
		}
	}
	if = {
		limit = {
			check_variable = {
				var = max_effective_hospitals
				value = num_of_hospitals_temp
				compare = less_than_or_equals
			}
		}
		set_variable = { hospital_effect_correction = max_effective_hospitals }
		subtract_from_variable = { 
			hospital_effect_correction = num_of_hospitals_temp
		}
		multiply_variable = {
			hospital_effect_correction = 0.005
		}
		add_dynamic_modifier = {
			modifier = university_overlimit_mod
		}
		add_dynamic_modifier = {
			modifier = hospital_overlimit_mod
		}
	}
	else = {
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = hospital_overlimit_mod
				}
			}
			remove_dynamic_modifier = {
				modifier = hospital_overlimit_mod
			}
		}
	}
	if = {
		limit = {
			check_variable = {
				var = max_effective_prisons
				value = num_of_prisons_temp
				compare = less_than_or_equals
			}
		}
		add_dynamic_modifier = {
			modifier = prison_overlimit_mod
		}
	}
	else = {
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = prison_overlimit_mod
				}
			}
			remove_dynamic_modifier = {
				modifier = prison_overlimit_mod
			}
		}
	}

	set_variable = { januszex_effect_stab = num_of_januszexes_temp }
	multiply_variable = {
		januszex_effect_stab = 0.005
	}
	set_variable = {
		januszex_effect_prod = januszex_effect_stab
	}
	multiply_temp_variable = {
		januszex_effect_prod = 0.1
	}
	if = {
		limit = {
			check_variable = {
				num_of_hospitals_temp > 0
			}
		}
		add_dynamic_modifier = {
			modifier = hospital_mod
		}
	}
	else_if = {
		limit = {
			has_dynamic_modifier = {
				modifier = university_mod
			}
		}
		remove_dynamic_modifier = {
			modifier = university_mod
		}
	}
	if = {
		limit = {
			check_variable = {
				var = max_effective_januszexes
				value = num_of_januszexes_temp
				compare = less_than_or_equals
			}
		}
		set_variable = { januszex_effect_correction_stab = max_effective_januszexes }
		subtract_from_variable = { 
			januszex_effect_correction_stab = num_of_januszexes_temp
		}
		set_variable = {
			januszex_effect_correction_prod = januszex_effect_correction_stab
		}
		multiply_variable = {
			januszex_effect_correction_prod = 0.005
		}
		multiply_variable = {
			januszex_effect_correction_prod = 0.1
		}
		multiply_variable = {
			januszex_effect_correction_stab = 0.005
		}
		add_dynamic_modifier = {
			modifier = januszex_overlimit_mod
		}
	}
	else = {
		if = {
			limit = {
				has_dynamic_modifier = {
					modifier = januszex_overlimit_mod
				}
			}
			remove_dynamic_modifier = {
				modifier = januszex_overlimit_mod
			}
		}
	}
} 
count_voi_ownership = {
	set_variable = { lodz_ownership = 0 }
	set_variable = { holy_cross_ownership = 0 }
	set_variable = { zaglebie_and_jura_ownership = 0 }
	set_variable = { upper_silesia_ownership = 0 }
	set_variable = { tatry_region_ownership = 0 }
	set_variable = { opolskie_ownership = 0 }
	set_variable = { lower_silesia_ownership = 0 }
	set_variable = { lubuskie_ownership = 0 }
	set_variable = { west_pomerania_ownership = 0 }
	set_variable = { southern_greater_poland_ownership = 0 }
	set_variable = { northern_greater_poland_ownership = 0 }
	set_variable = { kuyavia_ownership = 0 }
	set_variable = { pomerelia_ownership = 0 }
	set_variable = { warmia_and_masuria_ownership = 0 }
	set_variable = { podlasie_ownership = 0 }
	set_variable = { mazovia_ownership = 0 }
	set_variable = { capital_district_ownership = 0 }
	set_variable = { radom_province_ownership = 0 }
	set_variable = { lubelskie_ownership = 0 }
	set_variable = { subcarpathia_ownership = 0 }
	set_variable = { lesser_poland_ownership = 0 }
	every_owned_state = {
		limit = {
			is_lodz_state = yes
		}
		add_to_variable = { prev.lodz_ownership = 1 }
	}
	every_owned_state = {
		limit = {
			is_holy_cross_state = yes
		}
		add_to_variable = { prev.holy_cross_ownership = 1 }
	}
	every_owned_state = {
		limit = {
			is_zaglebie_and_jura_state = yes
		}
		add_to_variable = { prev.zaglebie_and_jura_ownership = 1 }
	}
	every_owned_state = {
		limit = {
			is_upper_silesia_state = yes
		}
		add_to_variable = { prev.upper_silesia_ownership = 1 }
	}
	every_owned_state = {
		limit = {
			is_tatry_region_state = yes
		}
		add_to_variable = { prev.tatry_region_ownership = 1 }
	}
	every_owned_state = {
		limit = {
			is_opolskie_state = yes
		}
		add_to_variable = { prev.opolskie_ownership = 1 }
	}
	every_owned_state = {
		limit = {
			is_lower_silesia_state = yes
		}
		add_to_variable = { prev.lower_silesia_ownership = 1 }
	}
	every_owned_state = {
		limit = {
			is_lubuskie_state = yes
		}
		add_to_variable = { prev.lubuskie_ownership = 1 }
	}
	every_owned_state = {
		limit = {
			is_west_pomerania_state = yes
		}
		add_to_variable = { prev.west_pomerania_ownership = 1 }
	}
	every_owned_state = {
		limit = {
			is_southern_greater_poland_state = yes
		}
		add_to_variable = { prev.southern_greater_poland_ownership = 1 }
	}
	every_owned_state = {
		limit = {
			is_northern_greater_poland_state = yes
		}
		add_to_variable = { prev.northern_greater_poland_ownership = 1 }
	}
	every_owned_state = {
		limit = {
			is_kuyavia_state = yes
		}
		add_to_variable = { prev.kuyavia_ownership = 1 }
	}
	every_owned_state = {
		limit = {
			is_pomerelia_state = yes
		}
		add_to_variable = { prev.pomerelia_ownership = 1 }
	}
	every_owned_state = {
		limit = {
			is_warmia_and_masuria_state = yes
		}
		add_to_variable = { prev.warmia_and_masuria_ownership = 1 }
	}
	every_owned_state = {
		limit = {
			is_podlasie_state = yes
		}
		add_to_variable = { prev.podlasie_ownership = 1 }
	}
	every_owned_state = {
		limit = {
			is_mazovia_state = yes
		}
		add_to_variable = { prev.mazovia_ownership = 1 }
	}
	every_owned_state = {
		limit = {
			is_capital_district_state = yes
		}
		add_to_variable = { prev.capital_district_ownership = 1 }
	}
	every_owned_state = {
		limit = {
			is_radom_province_state = yes
		}
		add_to_variable = { prev.radom_province_ownership = 1 }
	}
	every_owned_state = {
		limit = {
			is_lubelskie_state = yes
		}
		add_to_variable = { prev.lubelskie_ownership = 1 }
	}
	every_owned_state = {
		limit = {
			is_subcarpathia_state = yes
		}
		add_to_variable = { prev.subcarpathia_ownership = 1 }
	}
	every_owned_state = {
		limit = {
			is_lesser_poland_state = yes
		}
		add_to_variable = { prev.lesser_poland_ownership = 1 }
	}
	divide_variable = {lodz_ownership = 50}
	divide_variable = {holy_cross_ownership = 36}
	divide_variable = {zaglebie_and_jura_ownership = 42}
	divide_variable = {upper_silesia_ownership = 46}
	divide_variable = {tatry_region_ownership = 30}
	divide_variable = {opolskie_ownership = 24}
	divide_variable = {lower_silesia_ownership = 30}
	divide_variable = {lubuskie_ownership = 36}
	divide_variable = {west_pomerania_ownership = 37}
	divide_variable = {southern_greater_poland_ownership = 41}
	divide_variable = {northern_greater_poland_ownership = 49}
	divide_variable = {kuyavia_ownership = 43}
	divide_variable = {pomerelia_ownership = 40}
	divide_variable = {warmia_and_masuria_ownership = 28}
	divide_variable = {podlasie_ownership = 51}
	divide_variable = { mazovia_ownership = 31 }
	divide_variable = { capital_district_ownership = 43 }
	divide_variable = { radom_province_ownership = 15 }
	divide_variable = { lubelskie_ownership = 39 }
	divide_variable = { subcarpathia_ownership = 41 }
	divide_variable = { lesser_poland_ownership = 49 }
}

russian_invasion_falls_apart = {
	for_each_scope_loop = {
		array = global.rightful_warmia_clay
		if = {
			limit = {
				NOT = {
					has_state_flag = offensive_stalled
				}
			}
			add_province_modifier = {
				static_modifiers = { unplanned_offensive }
				province = {
					all_provinces = yes
				}
			}
			set_state_flag = offensive_stalled
		}
	}
}

delete_eurokom_templates = {
	delete_unit_template_and_units = {
		division_template = "Euroinfanteriebataillon"
		disband = yes
	}
	delete_unit_template_and_units = {
		division_template = "Europanzergrenadierbataillon (armor)"
		disband = yes
	}
	delete_unit_template_and_units = {
		division_template = "Europanzergrenadierbataillon (mot. inf.)"
		disband = yes
	}
	delete_unit_template_and_units = {
		division_template = "Pro-europejscy ochotnicy"
		disband = yes
	}
}

check_workshop_limit = {

	set_temp_variable = {
		owned_states_count = ROOT.owned_states	
	}
	set_temp_variable = {
		owned_states_modulo = owned_states_count
	}

	modulo_temp_variable = {
		owned_states_modulo = 4
	}
	divide_temp_variable = {
		owned_states_count = 4
	}
	round_temp_variable = owned_states_count
	if = {
		limit = {
			check_variable = {
				owned_states_modulo > 1
			}
		}
		subtract_from_temp_variable = {
			owned_states_count = 1
		}
	}
	
	if = {
		limit = {
			check_variable = {
				var = active_workshops
				value = owned_states_count
				compare = greater_than_or_equals
			}
		}
		set_country_flag = workshop_limit
	}
	else = {
		clr_country_flag = workshop_limit
	}
}

#OgÃ³lnie to jest na nierozjebywanie siÄ poparcia podczas puppetowania, pierwsze dajesz przed puppetowaniem, drugie po
get_current_government_type = {
	clear_variable = original_government_type
	set_variable = { original_government_type = current_party_ideology_group }

	if = {
		limit = { has_elections = yes }
		set_country_flag = original_government_type_had_elections
	}

	clear_array = original_popularities
	add_to_array = { original_popularities = party_popularity_100@marxism_cranism }
	add_to_array = { original_popularities = party_popularity_100@squattism }
	add_to_array = { original_popularities = party_popularity_100@socialdemocrature }
	add_to_array = { original_popularities = party_popularity_100@euroliberalism }
	add_to_array = { original_popularities = party_popularity_100@freemarketism }
	add_to_array = { original_popularities = party_popularity_100@paternal_conservatism }
	add_to_array = { original_popularities = party_popularity_100@autocracy }
	add_to_array = { original_popularities = party_popularity_100@corporativism }
	add_to_array = { original_popularities = party_popularity_100@neonationalism }
	add_to_array = { original_popularities = party_popularity_100@reactionary }

	set_temp_variable = { sum = 100 }
	for_each_loop = {
		array = original_popularities
		subtract_from_temp_variable = { sum = v }
	}
	add_to_array = { original_popularities = sum } #last value (postpol), calculated directly to avoid rounding errors

	if = {
		limit = { has_autonomy_state = autonomy_colony }
		set_country_flag = autonomy_colony
	}
	else_if = {
		limit = { has_autonomy_state = autonomy_dominion }
		set_country_flag = autonomy_dominion
	}
	else_if = {
		limit = { has_autonomy_state = autonomy_integrated_puppet }
		set_country_flag = autonomy_integrated_puppet
	}
	else_if = {
		limit = { has_autonomy_state = autonomy_collaboration_government }
		set_country_flag = autonomy_collaboration_government
	}
	else_if = {
		limit = { has_autonomy_state = autonomy_personal_union }
		set_country_flag = autonomy_personal_union
	}
	else_if = {
		limit = { has_autonomy_state = autonomy_eurokommissariat }
		set_country_flag = autonomy_eurokommissariat
	}
	else_if = {
		limit = { has_autonomy_state = autonomy_europrotectorate }
		set_country_flag = autonomy_europrotectorate
	}
	else_if = {
		limit = { has_autonomy_state = autonomy_satellite }
		set_country_flag = autonomy_satellite
	}
	else_if = {
		limit = { has_autonomy_state = autonomy_supervised_state }
		set_country_flag = autonomy_supervised_state
	}
	else_if = {
		limit = { has_autonomy_state = autonomy_wtt_imperial_associate  }
		set_country_flag = autonomy_wtt_imperial_associate 
	}
	else_if = {
		limit = { has_autonomy_state = autonomy_wtt_imperial_protectorate }
		set_country_flag = autonomy_wtt_imperial_protectorate
	}
	else_if = {
		limit = { has_autonomy_state = autonomy_wtt_imperial_subject }
		set_country_flag = autonomy_wtt_imperial_subject
	}
	else_if = {
		limit = { is_subject = yes }
		set_country_flag = default_puppet
	}
}

restore_previous_government_type = {
	hidden_effect = {
		if = {
			limit = { has_variable = original_government_type } #needed to avoid a CTD
			if = {
				limit = { has_country_flag = original_government_type_had_elections }
				clr_country_flag = original_government_type_had_elections
				set_politics = {
					ruling_party = var:original_government_type
					elections_allowed = yes
				}
			}
			else = {
				set_politics = {
					ruling_party = var:original_government_type
					elections_allowed = no
				}
			}
		}
		clear_variable = original_government_type

		if = {
			limit = { check_variable = { original_popularities^num > 0 } }
			set_popularities = {
				marxism_cranism = original_popularities^0
				squattism = original_popularities^1
				socialdemocrature = original_popularities^2
				euroliberalism = original_popularities^3
				freemarketism = original_popularities^4
				paternal_conservatism = original_popularities^5
				autocracy = original_popularities^6
				corporativism = original_popularities^7
				neonationalism = original_popularities^8
				reactionary = original_popularities^9
				postpolonism = original_popularities^10
			}
			clear_array = original_popularities
		}

		clr_country_flag = autonomy_colony
		clr_country_flag = autonomy_dominion
		clr_country_flag = autonomy_integrated_puppet
		clr_country_flag = autonomy_collaboration_government
		clr_country_flag = autonomy_personal_union
		clr_country_flag = autonomy_reichskommissariat
		clr_country_flag = autonomy_reichsprotectorate
		clr_country_flag = autonomy_satellite
		clr_country_flag = autonomy_supervised_state
		clr_country_flag = autonomy_wtt_imperial_associate 
		clr_country_flag = autonomy_wtt_imperial_protectorate
		clr_country_flag = autonomy_wtt_imperial_subject
	}
}

